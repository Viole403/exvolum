// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  firstName     String?
  lastName      String?
  phone         String?
  dateOfBirth   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  preferences   Json?
  role          UserRole  @default(USER)

  accounts                Account[]
  sessions                Session[]
  authenticators          Authenticator[]
  addresses               Address[]
  orders                  Order[]
  reviews                 Review[]
  wishlist                WishlistItem[]
  newsletterSubscriptions NewsletterSubscription[]
  socialAccounts          SocialAccount[]
  loginHistory            LoginHistory[]
  paymentMethods          PaymentMethod[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Address {
  id        String      @id @default(cuid())
  userId    String
  type      AddressType
  firstName String
  lastName  String
  company   String?
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  phone     String?
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  parentId    String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Brand {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("brands")
}

model Product {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique
  description       String
  longDescription   String?
  price             Float
  compareAtPrice    Float?
  sku               String?
  inventoryQuantity Int      @default(0)
  weight            Float?
  weightUnit        String?
  categoryId        String
  brandId           String?
  featured          Boolean  @default(false)
  published         Boolean  @default(true)
  tags              String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  category   Category         @relation(fields: [categoryId], references: [id])
  brand      Brand?           @relation(fields: [brandId], references: [id])
  images     ProductImage[]
  variants   ProductVariant[]
  orderItems OrderItem[]
  reviews    Review[]
  wishlist   WishlistItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id                String   @id @default(cuid())
  productId         String
  name              String
  sku               String   @unique
  price             Float
  compareAtPrice    Float?
  inventoryQuantity Int      @default(0)
  weight            Float?
  weightUnit        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  options    VariantOption[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model VariantOption {
  id          String @id @default(cuid())
  variantId   String
  optionName  String
  optionValue String

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("variant_options")
}

model Order {
  id                String        @id @default(cuid())
  userId            String
  orderNumber       String        @unique
  status            OrderStatus
  paymentStatus     PaymentStatus
  subtotal          Float
  taxAmount         Float
  shippingAmount    Float
  discountAmount    Float         @default(0)
  total             Float
  currency          String        @default("USD")
  shippingAddressId String
  billingAddressId  String
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id])
  shippingAddress Address       @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address       @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  tracking        TrackingInfo?

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  price     Float
  total     Float

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model TrackingInfo {
  id                String    @id @default(cuid())
  orderId           String    @unique
  carrier           String
  trackingNumber    String
  trackingUrl       String?
  status            String
  estimatedDelivery DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  order  Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  events TrackingEvent[]

  @@map("tracking_info")
}

model TrackingEvent {
  id          String   @id @default(cuid())
  trackingId  String
  status      String
  description String
  location    String?
  timestamp   DateTime

  tracking TrackingInfo @relation(fields: [trackingId], references: [id], onDelete: Cascade)

  @@map("tracking_events")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  title     String?
  content   String?
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User          @relation(fields: [userId], references: [id])
  product Product       @relation(fields: [productId], references: [id])
  images  ReviewImage[]

  @@map("reviews")
}

model ReviewImage {
  id       String  @id @default(cuid())
  reviewId String
  url      String
  alt      String?

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@map("review_images")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Article {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  excerpt     String?
  content     String
  image       String?
  author      String
  tags        String[]
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("articles")
}

model NewsletterSubscription {
  id         String   @id @default(cuid())
  email      String   @unique
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscribed Boolean  @default(true)
  tags       String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("newsletter_subscriptions")
}

model SocialAccount {
  id         String         @id @default(cuid())
  userId     String
  provider   SocialProvider
  providerId String
  email      String?
  name       String?
  image      String?
  isLinked   Boolean        @default(true)
  linkedAt   DateTime       @default(now())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@unique([userId, provider])
  @@map("social_accounts")
}

model LoginHistory {
  id            String      @id @default(cuid())
  userId        String
  loginMethod   LoginMethod
  ipAddress     String
  userAgent     String
  device        String
  location      String?
  success       Boolean
  failureReason String?
  sessionId     String?
  createdAt     DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_history")
}

model PaymentMethod {
  id          String            @id @default(cuid())
  userId      String
  type        PaymentMethodType
  provider    String
  last4       String
  expiryMonth Int
  expiryYear  Int
  holderName  String
  isDefault   Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model TeamMember {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  role          String
  image         String
  description   String
  socialLinks   Json?    // e.g., { linkedin: string, twitter: string, github: string, website: string }
  skills        String[] // e.g., ["JavaScript", "React", "Node.js"]
  education     Json?    // e.g., [{ degree: "B.Sc. Computer Science", institution: "University XYZ", year: 2018 }]
  experience    Json?    // e.g., [{ title: "Software Engineer", company: "ABC Corp", duration: "2018-2022", description: "Developed web applications." }]
  contactEmail  String?
  contactPhone  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum SocialProvider {
  GOOGLE
  APPLE
  FACEBOOK
  TWITTER
}

enum LoginMethod {
  EMAIL
  GOOGLE
  APPLE
  FACEBOOK
  TWITTER
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  DIGITAL_WALLET
}

enum UserRole {
  USER
  ADMIN
}
